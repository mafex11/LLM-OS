Windows-Use Project Changes Log
================================

Date: December 19, 2024 (Latest Update - v4.10)
Update: Backend Voice Integration with main.py STT/TTS

CHANGES:
- Removed Web Speech API implementation from frontend
- Connected frontend to existing backend voice system from main.py
- Added voice mode API endpoints for backend STT/TTS control
- Implemented status polling to sync frontend with backend voice state
- Added auto-send queries after speech pause (like main.py implementation)
- Enhanced voice button with real-time status from backend
- Added comprehensive error handling for API key and service issues
- Integrated with existing Deepgram STT and ElevenLabs TTS services

TECHNICAL DETAILS:
- Backend: Added voice control endpoints in api_server.py (/api/voice/start, /api/voice/stop, /api/voice/status)
- Frontend: Removed Web Speech API, added backend voice integration in frontend/src/app/chat/page.tsx
- STT: Uses existing Deepgram speech recognition from main.py with auto-send after pause
- TTS: Uses existing ElevenLabs text-to-speech from main.py for AI responses
- Threading: Voice mode runs in separate thread to avoid blocking API server
- Status Sync: Frontend polls backend every second for real-time voice state updates
- Error Handling: Proper validation for API keys and service availability
- Integration: Uses existing run_voice_mode function from main.py

VOICE FEATURES:
- Backend-driven speech recognition with Deepgram
- Automatic query sending after 1.5 second speech pause
- Backend TTS for AI responses using ElevenLabs
- Real-time status synchronization between frontend and backend
- Visual feedback with animated microphone button
- Comprehensive error handling and user notifications
- Uses existing proven voice implementation from main.py
- No additional browser dependencies required

Date: December 19, 2024 (Previous Update - v4.8)
Update: Disabled TTS for AI by Default

CHANGES:
- Changed TTS default from enabled (true) to disabled (false) across all entry points
- Updated main.py to default ENABLE_TTS to "false"
- Updated api_server.py startup and streaming endpoints to default ENABLE_TTS to "false"
- Updated main_stt.py to default ENABLE_TTS to "false"
- Updated desktop-app config template to default ENABLE_TTS to "false"
- Updated Agent class default enable_tts parameter to False
- Users can still enable TTS by setting ENABLE_TTS=true in environment variables
- Maintains backward compatibility for existing installations

TECHNICAL DETAILS:
- Backend: Changed os.getenv("ENABLE_TTS", "true") to os.getenv("ENABLE_TTS", "false") in all files
- Agent: Changed default enable_tts parameter from True to False in service.py
- Config: Updated config-template.env to show ENABLE_TTS=false as default
- Documentation: Updated comment to reflect new default (default: false)

Date: December 19, 2024 (Previous Update - v4.7)
Update: Added Confirmation Dialogs for All API Keys and Removed Asterisk Masking

CHANGES:
- Added confirmation dialogs for all API keys (Google, ElevenLabs, Deepgram)
- Removed asterisk masking from API keys - now shows actual keys with eye reveal button only
- Updated backend to return actual API keys instead of masked versions
- Enhanced confirmation dialog to show specific API key type being changed
- Improved user experience with consistent confirmation workflow for all API keys
- Removed asterisk detection logic from backend since masking is no longer used

TECHNICAL DETAILS:
- Backend: Removed mask_key function and asterisk detection from get_api_keys endpoint
- Backend: Updated save_api_keys to not check for asterisk patterns
- Frontend: Added pendingApiKeyType state to track which API key is being changed
- Frontend: Updated handleApiKeyChange to accept key type parameter
- Frontend: Enhanced confirmation dialog to show dynamic API key type name
- Frontend: Updated all API key input handlers to use confirmation dialog

Date: October 10, 2025 (v4.3)
Update: Montserrat Font Implementation

Date: October 10, 2025 (v4.2)
Update: Ember Glow Background Theme

Date: October 10, 2025 (v4.1)
Update: Voice-Focused Hero Section

Date: October 10, 2025 (v4)
Update: Modern SaaS Frontend with Framer Motion & Hugeicons

Date: October 10, 2025 (v3)
Update: Desktop App Installer with Data Directories

Date: October 10, 2025 (v2)
Update: Settings Page with Sidebar Layout

Date: October 10, 2025 (v1)
Update: Moved Settings to Separate Page

Date: October 10, 2025 (Earlier)
Update: Added API Key Settings to Frontend UI

CHANGES MADE:
-------------

1. Frontend Settings Panel (frontend/src/app/page.tsx)
   - Added API key management section with three inputs:
     * Google API Key (required) - for Gemini AI
     * ElevenLabs API Key (optional) - for text-to-speech
     * Deepgram API Key (optional) - for voice control
   - Added show/hide toggle for password-style masking
   - Added save button with loading state
   - Added helpful links to get API keys
   - Integrated toast notifications for user feedback

2. Backend API Endpoints (api_server.py)
   - Added GET /api/config/keys endpoint to fetch masked API keys
   - Added POST /api/config/keys endpoint to save keys to .env file
   - Added ApiKeysRequest and ApiKeysResponse models
   - Keys are masked when sent to frontend (first 4 + last 4 chars shown)
   - Keys are saved to .env file at project root

3. Toast Components (NEW)
   - Created frontend/src/components/ui/toast.tsx
   - Created frontend/src/components/ui/toaster.tsx
   - Created frontend/src/hooks/use-toast.tsx
   - Added @radix-ui/react-toast dependency to package.json

4. Updated Documentation
   - Updated PROJECT_STATUS.md with new feature details

HOW IT WORKS:
-------------
- Users click Settings in the sidebar
- Settings panel expands showing System Status and API Keys sections
- Users can enter their API keys with visual masking
- Click "Save API Keys" to write to .env file
- Toast notification confirms success and reminds to restart server
- Backend loads keys from .env on startup
- Keys are used for Gemini AI, TTS, and voice control features

SECURITY FEATURES:
------------------
- Keys displayed as password fields with show/hide toggle
- Keys masked when fetched from backend (e.g., "goog****key1")
- Only unmasked keys sent to backend to prevent accidental overwrites
- Keys stored locally in .env file, never transmitted elsewhere
- Proper error handling for invalid keys or file write failures

LATEST UPDATE V2 (Settings Layout Match):
------------------------------------------

7. Settings Page Layout Update (frontend/src/app/settings/page.tsx)
   - Added sidebar matching main page design
   - Same width structure with max-w-3xl centered content
   - API keys boxes centered in middle of page
   - Sidebar shows "Back to Chat" button
   - Sidebar footer shows agent ready status
   - Toggle sidebar with menu button (same as main page)
   - ScrollArea for content (same as main page)
   - Consistent header design with Settings icon

LAYOUT FEATURES:
- Sidebar: 256px (w-64) when open, animated collapse
- Content: Centered with max-w-3xl (same as chat)
- Cards: System Status and API Keys sections
- Responsive: Same responsive behavior as main page

UPDATE V1 (Settings Page):
--------------------------

5. Settings Page (NEW)
   - Created frontend/src/app/settings/page.tsx
   - Full-page dedicated settings interface
   - Better layout with Card components
   - Cleaner separation of concerns
   - Back button to return to chat

6. Main Page Cleanup (frontend/src/app/page.tsx)
   - Removed settings panel from main page
   - Settings button now navigates to /settings
   - Removed toast imports (not needed on main page)
   - Cleaner, more focused chat interface

NAVIGATION:
-----------
- Click "Settings" in sidebar → Navigate to /settings page
- Click "Back to Chat" on settings page → Return to /
- Settings are on a dedicated route for better UX

LATEST UPDATE V3 (Desktop App Installer):
------------------------------------------

8. NSIS Installer Script (NEW - desktop-app/installer-script.nsh)
   - Creates C:\ProgramData\WindowsUse directory structure on installation
   - Creates subdirectories: logs/, config/, cache/, data/
   - Sets proper permissions for all users to write (no admin needed)
   - Creates %APPDATA%\WindowsUse for user-specific data
   - Generates .env template at C:\ProgramData\WindowsUse\config\.env
   - Writes registry keys for data path references
   - Uninstaller prompts to keep or remove user data
   - Uses AccessControl plugin for permission management

9. Data Paths Module (NEW - desktop-app/electron/data-paths.js)
   - Manages data directory paths across Windows locations
   - Primary: C:\ProgramData\WindowsUse (shared, all users)
   - Fallback: %APPDATA%\WindowsUse (user-specific)
   - Automatically tests write access and falls back if needed
   - Creates all required subdirectories on demand
   - Functions: getDataPath(), getLogsPath(), getConfigPath(), getCachePath()
   - Initializes directories on app startup
   - Creates .env template if missing

10. Electron Main Process Updates (desktop-app/electron/main.js)
    - Imports and initializes data paths module on startup
    - Sets environment variables for backend:
      * WINDOWS_USE_DATA_PATH
      * WINDOWS_USE_LOGS_PATH
      * WINDOWS_USE_CONFIG_PATH
      * WINDOWS_USE_CACHE_PATH
    - Loads .env from config directory (C:\ProgramData\WindowsUse\config\.env)
    - Passes environment variables to backend process
    - Added IPC handlers:
      * get-data-paths - Returns all data directory paths
      * open-data-folder - Opens data folder in Explorer
      * open-config-folder - Opens config folder in Explorer
      * open-logs-folder - Opens logs folder in Explorer

11. Electron Preload Script (desktop-app/electron/preload.js)
    - Exposed new electronAPI methods:
      * getDataPaths() - Get all data paths
      * openDataFolder() - Open data folder
      * openConfigFolder() - Open config folder
      * openLogsFolder() - Open logs folder
    - Frontend can now access and open data directories

12. Backend Data Path Support (api_server.py)
    - Reads environment variables for data paths
    - Creates directories if they don't exist
    - Loads .env from CONFIG_PATH (installer location) or fallback to current directory
    - Saves API keys to correct .env location based on context
    - Supports both desktop app mode and standalone mode
    - Prints which .env file is being loaded for debugging

13. Package.json Build Configuration (desktop-app/package.json)
    - Added NSIS configuration:
      * include: "installer-script.nsh" - Custom installer script
      * deleteAppDataOnUninstall: false - Preserve data by default
    - Builds both NSIS installer and portable version
    - Installer target: "nsis" (recommended for users)
    - Portable target: "portable" (no installation needed)

14. Installer Guide (NEW - desktop-app/INSTALLER_GUIDE.md)
    - Complete documentation for installer system
    - Explains directory structure and permissions
    - Build instructions and prerequisites
    - Configuration guide for .env files
    - Troubleshooting section
    - Security considerations
    - Development vs production differences

INSTALLER FEATURES:
-------------------
- Professional NSIS-based installer
- Creates proper Windows directory structure
- C:\ProgramData\WindowsUse for shared app data
- %APPDATA%\WindowsUse for user-specific data
- Automatic permission setup (no admin needed after install)
- .env configuration file auto-generated
- Desktop and Start Menu shortcuts
- Customizable installation directory
- Uninstaller with data preservation option
- Registry integration for path management

DATA DIRECTORY STRUCTURE:
-------------------------
C:\ProgramData\WindowsUse\
├── logs\          - Application logs
├── config\        - Configuration files (.env)
├── cache\         - Temporary cache
└── data\          - General app data

%APPDATA%\WindowsUse\
├── logs\          - User-specific logs
└── config\        - User preferences

HOW TO BUILD INSTALLER:
-----------------------
1. cd desktop-app
2. npm install
3. npm run build:all
   - Builds Python backend to .exe
   - Builds Next.js frontend to static files
   - Packages everything into installer
4. Output: dist/Windows-Use AI Setup X.X.X.exe

INSTALLER BEHAVIOR:
-------------------
1. User runs setup.exe
2. Accepts license agreement
3. Chooses installation directory (default: C:\Program Files)
4. Installer creates C:\ProgramData\WindowsUse with subdirectories
5. Sets permissions for all users to write
6. Creates .env template in config directory
7. Writes registry entries
8. Creates desktop and start menu shortcuts
9. App runs without admin privileges
10. Configuration persists across updates

UNINSTALLER BEHAVIOR:
---------------------
1. User runs uninstaller
2. Prompted: "Keep data or remove?"
3. If keep: App removed, data preserved at C:\ProgramData\WindowsUse
4. If remove: Everything deleted including logs and config
5. Registry entries cleaned up

SECURITY & PERMISSIONS:
-----------------------
- Installer requires admin (one-time)
- App runs as normal user
- Data directories writable by all users
- API keys stored locally only
- No network transmission of keys
- Proper Windows ACL permissions set

FRONTEND INTEGRATION:
---------------------
- Frontend can call electronAPI.openDataFolder()
- Frontend can call electronAPI.openConfigFolder()
- Frontend can call electronAPI.openLogsFolder()
- Settings page can show data paths
- Direct access to config and logs from UI

UPDATE V4.3 (Montserrat Font):
-------------------------------

27. Typography Update (frontend/src/app/layout.tsx)
    - Replaced Inter font with Montserrat
    - Added multiple font weights: 300, 400, 500, 600, 700, 800
    - Set as CSS variable: --font-montserrat
    - Applied globally to entire application
    - Modern, clean sans-serif aesthetic
    - Better readability for headings and body text

28. Font Weight Optimization (All Pages)
    - Removed all font-bold instances
    - Changed main headings to font-light
    - Changed gradient text to font-normal
    - Replaced font-semibold with font-normal or font-semibold
    - Changed all font-medium to font-normal
    - Lighter, more elegant typography throughout
    - Better hierarchy with subtle weight differences

29. Golden Horizon Background (frontend/src/app/page.tsx)
    - Replaced ember glow (bottom) with golden horizon (top)
    - Ellipse gradient positioned at top (50% 0%)
    - Golden amber color: rgba(251, 191, 36, 0.25)
    - 80% width x 60% height ellipse shape
    - Subtle, elegant top-down glow effect
    - Better visual hierarchy for hero content

30. Navigation Bar Removal (frontend/src/app/page.tsx)
    - Removed navigation bar from landing page
    - Changed section from min-h-[calc(100vh-80px)] to min-h-screen
    - Cleaner, more focused hero section
    - Removed unused imports (SparklesIcon, Settings01Icon)
    - Full viewport height for better visual impact

31. Aurora Mystic Mist Background (frontend/src/app/page.tsx)
    - Replaced golden horizon with aurora mystic mist
    - Three layered radial gradients at bottom (50% 100%)
    - Teal aurora: rgba(58, 175, 169, 0.6)
    - Orange mist: rgba(255, 140, 0, 0.4)
    - Violet glow: rgba(238, 130, 238, 0.3)
    - Creates mystical, colorful aurora effect
    - More vibrant and eye-catching hero background

32. Modern SaaS Design Overhaul (frontend/src/app/page.tsx)
    - Changed to clean, minimal design matching modern SaaS aesthetics
    - Subtle gradient background with purple/blue tones
    - Replaced orange/amber colors with blue/purple accent scheme
    - New headline: "The easiest way to build your design products."
    - Blue to pink gradient text for emphasis
    - Replaced voice button with email input + CTA button
    - Email input with backdrop blur and subtle border
    - Blue CTA button (bg-blue-600)
    - Added "No credit card required • Free trial available" footer
    - Removed example commands section
    - Cleaner, more professional appearance
    - Better conversion-focused design

33. Etheral Shadow Background Component (frontend/src/components/ui/etheral-shadow.tsx)
    - Created new EtheralShadow component for animated fluid backgrounds
    - Uses SVG filters (feTurbulence, feDisplacementMap) for organic motion
    - Framer Motion for smooth hue rotation animation
    - Configurable color, animation scale/speed, noise overlay
    - Discord-blue color: rgba(88, 101, 242, 0.3)
    - Animation scale: 50, speed: 30
    - Noise overlay with opacity: 20, scale: 1
    - Creates mesmerizing, fluid background effect
    - Replaced static gradient with animated background
    - More engaging and modern visual experience

34. Voice-Focused Hero Redesign (frontend/src/app/page.tsx)
    - Reverted to Aurora Mystic Mist background
    - Voice-first design with microphone button
    - Advanced animation system using Framer Motion variants
    - Container with spring animations (stiffness: 60, damping: 16)
    - Staggered children animations for smooth reveals
    - Interactive microphone button with hover/tap effects
    - Pulse ring animations when listening (AnimatePresence)
    - Example commands section with staggered animations
    - Two CTA buttons: "Get Started" and "Watch Demo"
    - Micro-interactions on buttons (hover lift, tap scale)
    - Text: "Your voice. Your commands. Zero effort."
    - More engaging, interactive user experience
    - Better visual hierarchy with animation timing

35. Simplified Hero Input Design (frontend/src/app/page.tsx)
    - Replaced microphone button with text input box
    - Input placeholder: "Enter what you want to do..."
    - Glass-morphism input design (backdrop blur, subtle border)
    - Reduced suggestions from 4 to 3 examples
    - Changed "Try saying:" to "Try:"
    - Removed quotes from suggestion text
    - Removed CTA buttons for cleaner design
    - Removed unused imports (Button, Mic01Icon, useState, AnimatePresence)
    - Simpler, more direct user interaction
    - Focus on action input rather than voice

36. Send Button Addition (frontend/src/app/page.tsx)
    - Added Send button next to input box
    - Button includes ArrowRight01Icon
    - Input and button in flex container with gap-2
    - Input uses flex-1 to fill available space
    - Button size: lg with px-6 padding
    - Clear call-to-action for submitting commands

37. Dotted Glow Background Integration (frontend/src/app/page.tsx)
    - Replaced Aurora Mystic Mist with DottedGlowBackground component
    - Canvas-based animated dotted background
    - Dots randomly glow and dim with organic shimmer effect
    - Purple glow color: rgba(147, 51, 234, 0.8)
    - Gap: 20px, Radius: 2px
    - Speed range: 0.3 to 0.8 rad/s
    - Opacity: 0.5 for subtle effect
    - Supports light/dark mode
    - More sophisticated, performant background animation

38. Centered Background Dimensions (frontend/src/app/page.tsx)
    - Centered DottedGlowBackground with fixed dimensions
    - Height: 796px, Width: 1096px (adjusted by user)
    - Centered using flex with items-center and justify-center
    - Overflow hidden to prevent background overflow
    - Creates focused, centered glow effect
    - Added subtle border: border-white/10
    - Added rounded corners: rounded-lg
    - Border defines the background area visually

39. Brighter Glow Color (frontend/src/app/page.tsx)
    - Updated glow color to brighter purple
    - Changed from rgba(147, 51, 234, 0.8) to rgba(200, 120, 255, 1)
    - Increased RGB values for brighter appearance
    - Full opacity (1.0) for maximum visibility
    - More vibrant and eye-catching glow effect

40. Adjusted Content Width (frontend/src/app/page.tsx)
    - Container max-width: max-w-6xl (72rem / 1152px)
    - Input box: max-w-3xl (48rem / 768px)
    - Supporting text: max-w-4xl (56rem / 896px)
    - Balanced proportions for better visual hierarchy
    - Removed eyebrow text (by user)
    - Updated headline to "The easiest way to interact with your computer."
    - Background width adjusted to 1196px (by user)
    - Reduced headline font sizes (by user)
    - Reduced supporting text size (by user)

41. Modern Compact Input Design (frontend/src/app/page.tsx)
    - Changed input to rounded-full for modern pill shape
    - Reduced padding: px-4 py-2.5 (from px-6 py-4)
    - Smaller text: text-sm (from text-base)
    - More subtle background: bg-white/5 (from bg-white/10)
    - Thinner border: border-white/10 (from border-white/20)
    - Softer focus ring: focus:ring-1 focus:ring-primary/50
    - Button size reduced to sm (from lg)
    - Button rounded-full for consistency
    - Smaller icon: size 14 (from 18)
    - Reduced gap between text and icon: gap-1.5
    - Added transition-all for smooth interactions
    - Cleaner, more modern appearance
    - Background changed to full screen (by user)
    - Input rounded corners removed (by user)
    - Button rounded corners removed (by user)

42. CTA Buttons Addition (frontend/src/app/page.tsx)
    - Added "Get Started" button linking to /chat
    - Added "Configure API Keys" button linking to /settings
    - Both buttons with icons (ArrowRight01Icon, Settings01Icon)
    - Responsive layout: stacked on mobile, row on desktop
    - Gap-3 spacing between buttons
    - Default size with appropriate padding
    - Get Started uses primary style
    - Configure API Keys uses outline variant
    - Positioned between input box and example commands

43. Animated Border Magic Effect (frontend/src/app/page.tsx)
    - Added spinning conic gradient border to input box
    - Added spinning conic gradient border to send button
    - Gradient colors: #E2CBFF (light purple) → #393BB2 (deep blue) → #E2CBFF
    - 2s linear infinite spin animation
    - Rounded-full shape for both input and button
    - Dark slate-950 background with backdrop-blur-3xl
    - Creates mesmerizing animated border effect
    - Consistent styling across input and button

44. Microphone Icon Button (frontend/src/app/page.tsx)
    - Added microphone icon button on left side of input
    - Same animated border as input and send button
    - Circular shape: h-12 w-12
    - Contains Mic01Icon (size 18)
    - Same gradient border animation
    - Positioned before input box with gap-2
    - Consistent styling across all three elements
    - Voice input trigger button

45. Input Navigation Functionality (frontend/src/app/page.tsx)
    - Added state management for input value (useState)
    - Added useRouter for navigation
    - handleStartNow function navigates to /chat with task parameter
    - Input value passed as query parameter: ?task=encodedValue
    - Enter key triggers navigation (onKeyPress handler)
    - Empty input navigates to /chat without parameters
    - Task can be auto-started on chat page
    - Smooth user experience from landing to chat

46. Auto-Execute Task from Landing Page (frontend/src/app/chat/page.tsx)
    - Added useSearchParams to read query parameters
    - Added taskExecuted state to prevent duplicate execution
    - New executeTask function extracted from sendMessage
    - useEffect monitors for task query parameter
    - Auto-executes task with 100ms delay for mounting
    - Populates input field with task before execution
    - Prevents re-execution on re-renders
    - sendMessage simplified to just call executeTask
    - Removed duplicate code from sendMessage
    - Added eslint-disable for executeTask dependency
    - Seamless task execution from landing page
    - Tasks from hero section now auto-execute in chat
    - Fixed SSE parsing to match API format (thinking, reasoning, tool_use, etc.)
    - Properly handles workflow steps and final response
    - Shows thinking process and AI response correctly

47. Chat Page Background Update (frontend/src/app/chat/page.tsx)
    - Changed background from bg-background to bg-zinc-950
    - Darker, more modern appearance
    - Matches landing page aesthetic
    - Better contrast for content

48. Persistent Chat History with Conversation Context (backend + frontend)
    
    Backend Changes (api_server.py):
    - Added ConversationMessage model for conversation history
    - Updated QueryRequest to accept conversation_history parameter
    - Added langchain_core.messages imports (HumanMessage, AIMessage)
    - Modified streaming endpoint to load conversation history before each query
    - Converts frontend messages to LangChain message format
    - Sets agent.conversation_history for each session independently
    - Enables context-aware responses from previous messages
    
    Frontend Changes (frontend/src/app/chat/page.tsx):
    - Added localStorage persistence for all chat sessions
    - Loads chat history on page mount from localStorage
    - Saves chat sessions automatically on every change
    - Converts Date objects to/from JSON strings
    - Preserves all messages, workflow steps, and timestamps
    - Added isInitialized state to prevent premature saves
    - Creates initial session if localStorage is empty
    - Error handling for localStorage operations
    - Chat history persists across page refreshes
    - All conversations stored locally and accessible anytime
    - Updated auto-execute to wait for initialization
    - Sends conversation history with each query to backend
    - Builds conversation history array before API calls
    - Excludes workflow steps from conversation context
    - Backend receives full context for intelligent responses
    
    Features:
    - Multiple chat sessions with independent histories
    - Each chat maintains its own conversation context
    - AI remembers previous messages when continuing old chats
    - Users can open old chats and continue seamlessly
    - Context preserved across page refreshes
    - Smart title generation from first message
    - Automatic session management with localStorage
    - No data loss on browser close/refresh

49. Logo Integration (frontend/src/app/page.tsx + frontend/src/app/chat/page.tsx + frontend/src/app/settings/page.tsx)
    - Added Next.js Image component import
    - Landing page: Logo and brand name at top of hero section
    - Chat page: Logo and brand name in sidebar header
    - Settings page: Logo and brand name in sidebar header
    - Uses /logo.svg from public directory
    - Consistent branding across all pages
    - Animated appearance with framer-motion on landing page
    - Responsive sizing (40px hero, 24px sidebar)
    - Professional branding identity
    - Clean, modern appearance with proper spacing

50. Chat Message Layout Redesign - ChatGPT Style with Crimson Depth (frontend/src/app/chat/page.tsx)
    - Crimson depth background: radial-gradient from black to deep red (#2b0707)
    - Complete redesign with layered background and backdrop blur effects
    - Sidebar: black/20 background with backdrop-blur-sm and white/10 borders
    - User messages: Aligned to the right with logo.svg avatar (40x40, rounded-full, no background)
    - User messages: Text bubble with bg-zinc-800/50, padding, rounded-2xl
    - AI messages: No avatar for cleaner, minimal look
    - AI messages: No background for clean, minimal look
    - AI messages: TextGenerateEffect for animated text appearance with matching text size
    - User messages: Max width 80% for better readability
    - Loading state: No avatar for consistency, "Thinking..." with TextGenerateEffect
    - Input area: black/20 background with backdrop-blur-sm
    - Input box: black/30 background with backdrop-blur-sm, rounded-3xl, no border, shadow-lg
    - Input placeholder: "What can I do for you?" for better UX
    - Input focus: No ring/outline for clean ChatGPT-like appearance
    - Input layout: Separate buttons for voice and send (h-12 w-12 sm:h-14 sm:w-14)
    - Send button: purple-600 background, rounded-full, larger size
    - Voice button: black/20 hover with backdrop-blur-sm, rounded-full, larger size
    - Button icons: Increased to 20px for better visibility
    - Max width increased to 4xl for better space usage
    - Text: gray-100 color for better contrast
    - Clean, modern ChatGPT-like interface with dramatic crimson depth
    - Consistent branding with logo.svg
    - Professional dark theme with layered glass effects
    - Animated text generation for AI responses with consistent sizing
    - Fixed TextGenerateEffect styling to match user message text size
    - Clickable "View workflow steps" trigger positioned before AI message content
    - Collapsible workflow steps expand below the trigger when clicked
    - Clean single-trigger interface with proper message hierarchy
    - Added debugging logs to investigate workflow steps not showing issue
    - Fixed backend streaming wrapper issue - frontend agent now has its own streaming wrapper
    - Workflow steps should now be properly captured and sent to frontend

MONTSERRAT FEATURES:
--------------------
- Professional geometric sans-serif
- 6 weight variants for design flexibility
- Latin subset for optimal performance
- Applied to all text elements
- Clean, modern appearance
- Excellent readability at all sizes
- Using primarily: font-light, font-normal, font-semibold
- No bold fonts for softer, more refined aesthetic

UPDATE V4.2 (Ember Glow Background):
------------------------------------

25. Ember Glow Background (frontend/src/app/page.tsx)
    - Changed from gradient background to black base
    - Added radial gradient ember effect at bottom
    - Three-layer orange/amber/yellow glow effect
    - Positioned at 50% bottom with varying opacities
    - Creates warm, fire-like ambiance
    - All gradients use transparent fade-out

26. Dark Theme Color Updates
    - Changed primary gradient from purple/blue to orange/amber
    - Updated text colors to white and gray tones
    - Orange-themed microphone button with shadow
    - Command badges with orange borders and hover states
    - Navigation uses orange accent colors
    - All buttons use orange/amber gradients
    - Backdrop blur on command badges
    - Orange glow shadows on interactive elements

EMBER THEME FEATURES:
---------------------
- Black background (#000000)
- Orange ember glow (rgba(255, 69, 0, 0.6))
- Amber mid-glow (rgba(255, 140, 0, 0.4))
- Yellow highlight (rgba(255, 215, 0, 0.3))
- White primary text
- Gray-300 secondary text
- Orange-400 accent text
- Glowing orange shadows on buttons
- Warm, inviting atmosphere

UPDATE V4.1 (Voice-Focused Hero):
----------------------------------

23. Landing Page Redesign (frontend/src/app/page.tsx)
    - Replaced feature cards with voice-focused hero
    - Added large microphone button with pulse animation
    - Added example commands display
    - Changed messaging to focus on voice assistance
    - Added isListening state for interactive mic button
    - Removed bottom feature grid
    - More centered, minimal design
    - Commands: "Open Chrome", "Create folder", etc.

24. Pulse Animation (frontend/src/app/globals.css)
    - Added @keyframes pulse-ring animation
    - Scale from 1 to 1.5 with fade out
    - 2 second duration, infinite loop
    - Two overlapping pulses with 1s delay
    - Used for microphone listening indicator

VOICE HERO FEATURES:
--------------------
- Large interactive mic button (96px)
- Pulse rings when listening
- 4 example command badges
- Voice-first messaging
- Cleaner, more focused layout
- Gradient headline text
- Framer Motion staggered animations

UPDATE V4 (Modern SaaS Frontend):
----------------------------------

15. Frontend Modernization
    - Installed framer-motion and hugeicons-react dependencies
    - Created theme provider for dark/light mode switching
    - Updated layout.tsx with ThemeProvider (default dark theme)
    - Created new landing page with hero section at root (/)
    - Moved chat interface from / to /chat route
    - Added comprehensive theme switcher in settings page
    - Added framer-motion animations throughout all pages
    - Replaced all lucide-react icons with hugeicons-react
    - Made all components fully responsive (mobile-first design)
    - Applied modern SaaS design patterns

16. Theme System (NEW)
    - Created frontend/src/components/theme-provider.tsx
    - Integrated next-themes for theme management
    - Default theme: dark
    - Switchable themes: dark/light
    - Theme persists across sessions
    - Smooth theme transitions without flash
    - Settings page includes theme switcher UI

17. Landing Page (NEW - frontend/src/app/page.tsx)
    - Modern hero section with gradient backgrounds
    - Animated heading with gradient text
    - Feature cards with hover animations
    - Call-to-action buttons (Start Automating, Configure Settings)
    - Navigation bar with logo and links
    - Framer Motion animations on load
    - Responsive design for all screen sizes
    - Icons from hugeicons-react library

18. Chat Page (UPDATED - frontend/src/app/chat/page.tsx)
    - Moved from / to /chat route
    - Added framer-motion animations for messages
    - Animated sidebar with slide transitions
    - Animated message entries with fade-in
    - Animated bot icon with subtle rotation
    - Empty state with animated bot icon
    - Responsive layout (mobile-friendly)
    - All icons replaced with hugeicons
    - Added Home button in sidebar
    - Backdrop blur effects on header and input area
    - Smooth transitions for all interactions

19. Settings Page (UPDATED - frontend/src/app/settings/page.tsx)
    - Added Appearance section at top
    - Theme switcher with dark/light mode buttons
    - Animated theme cards with hover effects
    - All sections use motion.div with staggered animations
    - Updated all icons to hugeicons-react
    - Responsive design improvements
    - Consistent with overall design system
    - Visual feedback on theme changes

20. Icon System Migration
    - Replaced Send → SentIcon
    - Replaced Bot → AiRobotIcon
    - Replaced User → User01Icon
    - Replaced Loader2 → Loading01Icon
    - Replaced Settings → Settings01Icon
    - Replaced Menu → Menu01Icon
    - Replaced X → Cancel01Icon
    - Replaced Plus → PlusSignIcon
    - Replaced MessageSquare → MessageMultiple02Icon
    - Replaced Trash2 → Delete02Icon
    - Replaced Edit2 → PencilEdit02Icon
    - Replaced Home → Home01Icon
    - Replaced ArrowRight → ArrowRight01Icon
    - Replaced Sparkles → Sparkles01Icon
    - Replaced Zap → FlashIcon
    - Replaced Shield → ShieldKeyIcon
    - Replaced Sun → Sun01Icon
    - Replaced Moon → Moon02Icon
    - Replaced Palette → PaintBrushIcon
    - Replaced Monitor → ComputerIcon
    - Replaced Key → Key01Icon
    - Replaced Eye/EyeOff → ViewIcon/ViewOffIcon
    - Replaced Save → Save01Icon
    - And many more workflow icons

21. Animation System
    - Page load animations with staggered delays
    - Message entry animations (fade-in from bottom)
    - Sidebar slide animations
    - Button hover and tap animations
    - Icon rotation animations (bot icon)
    - Card hover scale animations
    - Smooth transitions between routes
    - AnimatePresence for exit animations
    - Optimized for 60fps performance

22. Responsive Design Updates
    - Mobile-first approach
    - Breakpoints: sm (640px), md (768px), lg (1024px)
    - Sidebar collapses on mobile
    - Text sizes adjust per screen size
    - Touch-friendly button sizes
    - Optimized spacing for small screens
    - Hidden elements on mobile (e.g., helper text)
    - Flexible grid layouts
    - Responsive navigation

DESIGN PATTERNS:
----------------
- Modern gradient backgrounds
- Glassmorphism with backdrop-blur
- Neumorphic card designs
- Smooth micro-interactions
- Consistent spacing system
- Professional color palette
- Clear visual hierarchy
- Accessible color contrast
- Modern typography scale

ANIMATION FEATURES:
-------------------
- Fade-in on page load
- Slide-in for sidebars
- Scale on hover for cards
- Rotate for loading states
- Staggered list animations
- Exit animations on route changes
- Smooth theme transitions
- Subtle icon animations
- Button press feedback

THEME FEATURES:
---------------
- Dark mode (default)
- Light mode
- System-wide consistency
- No flash on load
- Persists across sessions
- Accessible in settings
- Visual theme switcher
- Smooth transitions
- Color scheme optimization

RESPONSIVE FEATURES:
--------------------
- Mobile navigation
- Touch-optimized controls
- Flexible layouts
- Adaptive typography
- Responsive images
- Mobile-first CSS
- Breakpoint system
- Fluid spacing
- Screen size detection

NEXT STEPS:
-----------
- Test landing page at http://localhost:3000/
- Test chat interface at http://localhost:3000/chat
- Test settings with theme switcher at http://localhost:3000/settings
- Verify animations work smoothly
- Test on different screen sizes
- Verify icon replacements display correctly
- Test theme persistence
- Check responsive behavior on mobile devices
- Verify dark/light mode switching
- Test all framer-motion animations

